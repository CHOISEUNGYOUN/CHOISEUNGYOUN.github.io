{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL - Day34: Password Encryption/","webpackCompilationHash":"4509ca7c2ffbd5f0d039","result":{"data":{"markdownRemark":{"id":"1d3563c2-ad6b-55a8-915f-31b58cecfcfc","html":"<p><em>This post is written in English(I am not pretty good at thougth)</em></p>\n<p>Password encryption is one of the important features when you bulid models of Django for a user data table. It is because it contains sensitive information such as passowrd, credit card numbers, or even Social Security Numbers(Resident Registration Number in South Korea) which web developers are supposed to conceal. In order not to leak such information, we encrypt such information unreadable. Amonog that, I would like to talk about how to encrypt password with Argon2 and Bcrypt.</p>\n<h3 id=\"bcrypt\"><a href=\"#bcrypt\" aria-label=\"bcrypt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bcrypt</h3>\n<p>It is a prevalent technology to encrypt password. At <a href=\"https://wecode.co.kr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wecode</a>, you will learn how to deal with password via this tool. It is very simple. All you need to do is just follow the sample code below.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">   <span class=\"token keyword\">import</span> bcrypt\n   encrypted_pw <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   User<span class=\"token punctuation\">(</span>\n        user_id  <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        name     <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> encrypted_pw<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        email    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        photo    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'photo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        profile  <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When you look at the <code class=\"language-text\">encrypted_pw</code> variable, it has 2 methods as follows: <code class=\"language-text\">bcrypt.hashpw</code> &#x26; <code class=\"language-text\">bcrypt.gensalt</code>. Both are in Bcrypt package, which you need to install with command <code class=\"language-text\">pip install bcrypt</code>.\nFirst off, <code class=\"language-text\">hashpw</code> means that you will encrypt input bytes password(first parameter) into one-way hash and encode it in <code class=\"language-text\">UTF-8</code>. Then, you salt it(put unpredictable strings) so as to enhance the code.\nThat is all! You master how to do that!</p>\n<p>After you read all of that above, you get to be wondering how you verify the user when they try to log in to. No worries. There is another method to verify to match the password with hashed one. Let’s see the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user_info<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> user_info<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'exp'</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">=</span> ONE_DAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    encoded_key <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>SECRET_KEY\n    algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span>\n    token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> encoded_key<span class=\"token punctuation\">,</span> algorithm<span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, <code class=\"language-text\">checkpw</code> method is screening the password whether it is the user’s.</p>\n<p>Keep in mind, all you need to do are encryption and check!</p>\n<p>Plus, there is another encryption extension called Argon2, which is gaining popularity nowadays, so please check the <a href=\"https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a> how to use it.(It is also very simple and similar to Bcrypt when it comes to usage.)</p>\n<p><em>Reference: <a href=\"https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PassLib - passlib.hash.argon2 - Argon2</a></br> <a href=\"https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PassLib - passlib.hash.bcrypt - BCrypt</a></br> <a href=\"https://docs.djangoproject.com/en/2.2/topics/auth/passwords/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Password management in Django</a></em></p>","fields":{"slug":"/posts/TIL - Day34: Password Encryption/","tagSlugs":["/tag/python/","/tag/django/","/tag/argon-2/","/tag/bcrypt/","/tag/password-encryption/"]},"frontmatter":{"date":"2019-09-01T22:40:32.169Z","description":"Introduction of Bcrypt","tags":["Python","Django","Argon2","Bcrypt","Password Encryption"],"title":"TIL - Day34: Password Encryption"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL - Day34: Password Encryption/"}}}