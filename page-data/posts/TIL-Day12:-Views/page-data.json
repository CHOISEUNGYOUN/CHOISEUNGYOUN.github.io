{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Day12:-Views/","webpackCompilationHash":"b95cfacd74a4b2a01fd9","result":{"data":{"markdownRemark":{"id":"63423382-f39d-5c2c-a5ef-be70992ac6a4","html":"<p>이번 포스팅은 장고 기본 개념 MVT의 Views에 대해 이야기 하고자 한다.<em>(Templates는 아직 사용 하지 않을거라서 정리하지 않겠다.)</em></p>\n<h3 id=\"view-\"><a href=\"#view-\" aria-label=\"view  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View ??????</h3>\n<p>처음에 View를 보았을 때, 단어와 개념이 명확하게 이어지지 않아 정말 혼란스러웠다.\n<em>(<del>이럴땐 implicit 하게 해놓았다. 거짓말쟁이…</del>)</em>\n그렇게 View를 이해하기 위해 인터넷을 헤메고 헤메다 결국 처음에 보았던 공식문서에서 해답을 찾았다.</p>\n<blockquote>\n<p>A view function, or view for short, is simply a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image … or anything, really. The view itself contains whatever arbitrary logic is necessary to return that response. </p>\n</blockquote>\n<p><em><strong>원문 출처: <a href=\"https://docs.djangoproject.com/en/2.2/topics/http/views/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django - Writing Views</a></strong></em></p>\n<p>여기서 세가지 특징이 보인다.</p>\n<ol>\n<li>View는 Python의 function이다.</li>\n<li>View는 Web request와 response를 담당한다(수신 &#x26; 송출의 기능)</li>\n<li>View는 작성자의 logic에 따라 송출 할 조건들을 설정 할 수 있다.(POST를 사용하면 Data Update도 할 수 있다.)</li>\n</ol>\n<p>필자가 이해 한 바로는 쌍방향 통신 채널 기능을 담당하는 것이 바로 Django의 View라고 보여진다. </p>\n<p>이제 조금씩 View에 대한 감이 잡히기 시작했다. 하지만 여기서 또 다른 난관이 등장한다. 그것은 바로 Function-based View(함수형 View)와 Class-based View(Class형 View)이다.</p>\n<h3 id=\"function-based-vs-class-based\"><a href=\"#function-based-vs-class-based\" aria-label=\"function based vs class based permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function-based Vs. Class-based</h3>\n<p>솔직히 Backend 분야를 거의 처음 접하다시피 하는 필자에게는 도데체 이 두가지가 무슨 차이를 가져올까 하는 의문을 가졌었다. 그런데 결론은 결국 또 본질에 있었다.(<del><strong>이건 명시적이네???</strong></del>) 공식 문서에 있는 예시 코드를 같이 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#Function-based</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponseRedirect\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> MyForm\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">myview</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> MyForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># &lt;process form cleaned data></span>\n            <span class=\"token keyword\">return</span> HttpResponseRedirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/success/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> MyForm<span class=\"token punctuation\">(</span>initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'form_template.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#Class-based</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponseRedirect\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> MyForm\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFormView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    form_class <span class=\"token operator\">=</span> MyForm\n    initial <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">}</span>\n    template_name <span class=\"token operator\">=</span> <span class=\"token string\">'form_template.html'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>form_class<span class=\"token punctuation\">(</span>initial<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>template_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>form_class<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># &lt;process form cleaned data></span>\n            <span class=\"token keyword\">return</span> HttpResponseRedirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/success/'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>template_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>적절한 예시는 아니겠지만, 위에서 볼 수 있듯이, 함수형은 단지 수신시, POST 메서드만 가지고 송신을 하겠다고 정의 되어있다. 만약 GET이나 다른 메서드를 사용해야 한다면, 각 수신에 따른 조건을 걸고 비슷한 논리의 코드를 재 작성해야하는 <a href=\"https://en.wikipedia.org/wiki/Boilerplate_code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">boilerplating</a>을 해야 할 것이다.</p>\n<h3 id=\"그럼-class형이-항상-옳은-것인가\"><a href=\"#%EA%B7%B8%EB%9F%BC-class%ED%98%95%EC%9D%B4-%ED%95%AD%EC%83%81-%EC%98%B3%EC%9D%80-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"그럼 class형이 항상 옳은 것인가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼 class형이 항상 옳은 것인가?</h3>\n<p>아니다. 제각각 필요한 때가 있고, 어떻게 사용 할 것인지는 코드 작성자의 재량이다.(<del><strong>나는 그럴 능력 없다</strong></del>)\n그럼 각각의 장단점을 살펴보자.</p>\n<h4 id=\"함수형\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95\" aria-label=\"함수형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형</h4>\n<h5 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h5>\n<ul>\n<li>논리 구현하기 쉽다.</li>\n<li>코드가 직관적이다.</li>\n<li>decorator를 적용하기 쉽다(<del>사실 잘 모르겠다.</del>)</li>\n<li>재사용할 필요없는 기능을 구현할 때 적절하다.</li>\n</ul>\n<h5 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h5>\n<ul>\n<li>재사용성이나 확장성이 떨어진다.</li>\n<li>Bolierplating의 위험이 항상 도사리고 있다.</li>\n</ul>\n<h4 id=\"class형\"><a href=\"#class%ED%98%95\" aria-label=\"class형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class형</h4>\n<h5 id=\"장점-1\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h5>\n<ul>\n<li>재사용성이 높다(특히, 상속을 이용할 수 있음.)</li>\n<li>Bolierplating을 방지할 수 있음.</li>\n<li>확장성이 좋다.</li>\n<li>구조화 하기 쉽다.</li>\n<li>Django 및 Python 내장 기능을 이용할 수 있다.</li>\n</ul>\n<h5 id=\"단점-1\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h5>\n<ul>\n<li>가독성이 떨어진다.</li>\n<li>추상적이다.</li>\n<li>decorator 사용이 함수형보다 까다롭다.</li>\n</ul>\n<p><em>Reference: <a href=\"https://docs.djangoproject.com/en/2.2/topics/http/views/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django - Writing Views</a></br> <a href=\"https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django - Introduction to class-based views</a></br> <a href=\"https://docs.djangoproject.com/en/2.2/topics/class-based-views/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django - Class-based views</a></br> <a href=\"https://medium.com/@ksarthak4ever/django-class-based-views-vs-function-based-view-e74b47b2e41b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\nSarthak Kumar - Django : Class Based Views vs Function Based Views</a></br> <a href=\"https://wsvincent.com/class-function-based-views/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">William Vincent - Django Tips #7: Function-Based Views vs Class-Based Views</a></em></p>","fields":{"slug":"/posts/TIL-Day12:-Views/","tagSlugs":["/tag/django/","/tag/views/","/tag/python/","/tag/foundation/","/tag/design-pattern/"]},"frontmatter":{"date":"2019-08-10T22:40:32.169Z","description":"Django의 Views 에 대해 알아보자","tags":["Django","Views","Python","Foundation","Design Pattern"],"title":"TIL - Day12: Views"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL-Day12:-Views/"}}}