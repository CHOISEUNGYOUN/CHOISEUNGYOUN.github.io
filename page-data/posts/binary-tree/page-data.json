{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/binary-tree/","webpackCompilationHash":"057deef99bdb453b688d","result":{"data":{"markdownRemark":{"id":"516aeebb-dfb1-5f0c-9430-064607788a6d","html":"<h4 id=\"최근에-이직한-직장은-ruby-on-rails를-사용한다-위코드-동기분들-중-루비로-자료구조를-공부하시는-분이-계시길래-필자도-공부할-겸-자료구조를-조악하게나마-구현해보았다\"><a href=\"#%EC%B5%9C%EA%B7%BC%EC%97%90-%EC%9D%B4%EC%A7%81%ED%95%9C-%EC%A7%81%EC%9E%A5%EC%9D%80-ruby-on-rails%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4-%EC%9C%84%EC%BD%94%EB%93%9C-%EB%8F%99%EA%B8%B0%EB%B6%84%EB%93%A4-%EC%A4%91-%EB%A3%A8%EB%B9%84%EB%A1%9C-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%98%EC%8B%9C%EB%8A%94-%EB%B6%84%EC%9D%B4-%EA%B3%84%EC%8B%9C%EA%B8%B8%EB%9E%98-%ED%95%84%EC%9E%90%EB%8F%84-%EA%B3%B5%EB%B6%80%ED%95%A0-%EA%B2%B8-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%A1%B0%EC%95%85%ED%95%98%EA%B2%8C%EB%82%98%EB%A7%88-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%95%98%EB%8B%A4\" aria-label=\"최근에 이직한 직장은 ruby on rails를 사용한다 위코드 동기분들 중 루비로 자료구조를 공부하시는 분이 계시길래 필자도 공부할 겸 자료구조를 조악하게나마 구현해보았다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최근에 이직한 직장은 Ruby on Rails를 사용한다. 위코드 동기분들 중, 루비로 자료구조를 공부하시는 분이 계시길래 필자도 공부할 겸 자료구조를 조악하게나마 구현해보았다.</h4>\n<h2 id=\"tree트리-란\"><a href=\"#tree%ED%8A%B8%EB%A6%AC-%EB%9E%80\" aria-label=\"tree트리 란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree(트리) 란?</h2>\n<p><code class=\"language-text\">트리(Tree)</code>는 일반적으로 대상 정보의 각 항목들을 계층적으로 연관되도록 구조화시키고자 할 때 사용하는 비선형 자료구조이다.\n데이터 요소들의 단순한 나열이 아닌 부모-자식 관계의 계층적 구조로 표현이 된다.\n트리는 그래프의 한 종류이며 사이클이 없다.</p>\n<h2 id=\"binary-tree이진트리-란\"><a href=\"#binary-tree%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EB%9E%80\" aria-label=\"binary tree이진트리 란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary Tree(이진트리) 란?</h2>\n<p>이진트리(Binary Tree)\n이진트리는 트리를 구성하는 노드들의 최대 차수(degree)가 2인 노드들로 구성되는 트리이다.</p>\n<p>이진트리의 레벨 i에서 가질 수 있는 최대 노드의 수는 2^i이다. (i>=0)\n깊이가 k인 이진트리가 가질 수 있는 최대 노드의 수는 2^k-1이다.(k>=1)</p>\n<p>해당 개념을 이해하기 위해서는 <a href=\"https://en.wikipedia.org/wiki/Recursion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">재귀(Recursion)</code></a>와 <a href=\"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">분할 정복(Divide and conquer)</code></a> 에 대한 사전 지식이 필요하니 해당 항목들 부터 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span>\n  attr_reader <span class=\"token symbol\">:value</span>\n  attr_accessor <span class=\"token symbol\">:left</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:right</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@value</span> <span class=\"token operator\">=</span> value\n    <span class=\"token variable\">@left</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n    <span class=\"token variable\">@right</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">Node</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">insert</span></span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token constant\">BinaryTree</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token constant\">BinaryTree</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">traverse</span></span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      traverse<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token comment\"># p node.value</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n      traverse<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">search</span></span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span>\n      p <span class=\"token string\">\"result <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>node<span class=\"token punctuation\">.</span>value<span class=\"token delimiter tag\">}</span></span>\"</span>\n      <span class=\"token keyword\">return</span> node\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">delete</span></span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span>\n      p <span class=\"token string\">\"result <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>node<span class=\"token punctuation\">.</span>value<span class=\"token delimiter tag\">}</span></span>\"</span>\n      node <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\ninclude <span class=\"token constant\">Node</span></code></pre></div>\n<h4 id=\"이진트리-구조는-검색-알고리즘의-기초가-되는걸로-알고있다-기본적인-개념을-숙지한다면-나중에-검색을-다루게-될때-도움이-되지-않을까-생각한다-\"><a href=\"#%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%8A%94-%EA%B2%80%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B8%B0%EC%B4%88%EA%B0%80-%EB%90%98%EB%8A%94%EA%B1%B8%EB%A1%9C-%EC%95%8C%EA%B3%A0%EC%9E%88%EB%8B%A4-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%88%99%EC%A7%80%ED%95%9C%EB%8B%A4%EB%A9%B4-%EB%82%98%EC%A4%91%EC%97%90-%EA%B2%80%EC%83%89%EC%9D%84-%EB%8B%A4%EB%A3%A8%EA%B2%8C-%EB%90%A0%EB%95%8C-%EB%8F%84%EC%9B%80%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84%EA%B9%8C-%EC%83%9D%EA%B0%81%ED%95%9C%EB%8B%A4-\" aria-label=\"이진트리 구조는 검색 알고리즘의 기초가 되는걸로 알고있다 기본적인 개념을 숙지한다면 나중에 검색을 다루게 될때 도움이 되지 않을까 생각한다  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진트리 구조는 검색 알고리즘의 기초가 되는걸로 알고있다. 기본적인 개념을 숙지한다면 나중에 검색을 다루게 될때 도움이 되지 않을까 생각한다 :)</h4>\n<p>*Reference:<br/>\n<a href=\"https://medium.com/derek-gc/data-structure-binary-tree-ruby-9e017dbac8b2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data structure: Binary Tree (Ruby)</a><br/>\n<a href=\"https://velog.io/@adam2/TREE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adam2.log(Velog) - [자료구조]Tree</a><br/>\n<a href=\"https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%ED%8A%B8%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">위키백과 - 이진트리</a><br/></p>","fields":{"slug":"/posts/binary-tree/","tagSlugs":["/tag/data-structure/","/tag/binary-tree/","/tag/이진트리/","/tag/wecode/","/tag/위코드/"]},"frontmatter":{"date":"2020-10-29T00:00:32.169Z","description":"Binary Tree(이진트리) 자료구조를 Ruby로 구현해보자!","tags":["Data Structure","Binary Tree","이진트리","Wecode","위코드"],"title":"Data structure-Binary Tree"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/binary-tree/"}}}