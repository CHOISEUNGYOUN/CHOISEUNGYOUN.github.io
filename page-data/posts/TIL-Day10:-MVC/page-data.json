{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Day10:-MVC/","webpackCompilationHash":"e5b88282a02c3d32aa16","result":{"data":{"markdownRemark":{"id":"0353d2c1-7586-5dc4-8c5a-78da9f72279c","html":"<!-- - [The first transition](#the-first-transition) -->\n<p>Django를 직접 다루기 전 기본적인 개념을 습득하는 단계로 Django framework의 MVT architecture 에 대해 파악 해보도록 하겠다.</p>\n<p><img src=\"https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2019/03/Django-Architecture-Diagram.jpg\" alt=\"MTV\">\n<em>MVT schematics / Reference: <a href=\"https://data-flair.training/blogs/django-architecture/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data Flair</a></em></p>\n<h3 id=\"1-model\"><a href=\"#1-model\" aria-label=\"1 model permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Model</h3>\n<p>Model은 Django.db 에 존재하는 하나의 클래스라고 보면 된다. Django 가 지향하는 ORM(Object-relational mapping, 객체 관계형 매핑, 일반적으로 관계형 DB 라고 일컫는다.)에서 데이터 정형화를 담당한다고 볼 수 있다. DB에 존재하는 data를 server에서 요청하는 형태에 맞추어 제공하는 역할을 한다.</p>\n<h3 id=\"2-view\"><a href=\"#2-view\" aria-label=\"2 view permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. View</h3>\n<p>기존 MVC(Models-Views-Controller)에서는 사용자에게 페이지를 렌더링하여 보여주는 구간을 일컫는 말이었으나, Django framework에서는 Controller의 기능을 담당한다.<em><strong>(정확하게 Controller와 동일한 개념은 아니다.)</strong></em>\n우리가 만들 API에서 데이터 송출 및 수정<em><strong>(POST 의 기능, 다음 포스팅에서 다루겠다.)</strong></em>을 담당한다.</p>\n<h3 id=\"3-template\"><a href=\"#3-template\" aria-label=\"3 template permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Template</h3>\n<p>기존 MVC 에서 Views를 담당하는 부분. HTML을 직접 전송하여 사용자 화면에 렌더링 되게 구현한다. 이 부분은 server에서 직접 HTML을 보내는 방식이 되므로, 3세대 Web Application정의에서 위배된다. Django는 2세대 방식, 즉 server에서 full web application을 구현하기 위해 개발된 framework이기에, 이러한 기능들을 구현 할 수 있으나, 현재는 잘 사용되지 않는 방식이다.</p>\n<p>이렇게 기본적인 개념들을 정리 해 보았으니, 다음 포스팅에서 부터는 MVT 중에서도 MV를 중점적으로 다루어 실제 API를 작성 해보는 과정을 기술하도록 하겠다.</p>\n<p><em>Reference : <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wikipedia: Object-relational mapping</a></br>\n<a href=\"https://data-flair.training/blogs/django-architecture/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data Flair: Django Architecture</a></br>\n<a href=\"https://data-flair.training/blogs/django-models/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data Flair: Django Models</a></br>\n<a href=\"https://data-flair.training/blogs/django-views/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data Flair: Django Views</a></br>\n<a href=\"https://data-flair.training/blogs/create-django-templates/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data Flair: Django Templates</a></em></br></p>","fields":{"slug":"/posts/TIL-Day10:-MVC/","tagSlugs":["/tag/django/","/tag/mvc/","/tag/python/","/tag/foundation/","/tag/design-pattern/"]},"frontmatter":{"date":"2019-08-08T22:40:32.169Z","description":"Django의 기본 개념 MVT 에 대해 알아보자","tags":["Django","MVC","Python","Foundation","Design Pattern"],"title":"TIL - Day10: MVT"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL-Day10:-MVC/"}}}