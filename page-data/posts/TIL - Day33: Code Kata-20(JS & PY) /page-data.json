{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL - Day33: Code Kata-20(JS & PY) /","webpackCompilationHash":"1e16eee9083a0ec22719","result":{"data":{"markdownRemark":{"id":"db70ee33-c912-593b-a45e-7c10475308d8","html":"<p><em><strong><u>필자는 현재 Python을 이용한 Backend 공부를 시작했기에, 모든 Code Kata 문제들을 JS와 PY로 풀어 올리도록 하겠다.</u></strong></em></br>\n<em>Javascript의 풀이와 Python의 풀이는 다를 수 있습니다!</em></p>\n<h2 id=\"문제\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<h3 id=\"이진탐색\"><a href=\"#%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89\" aria-label=\"이진탐색 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진탐색</h3>\n<p>이진 탐색은 순서대로 찾는 것이 아니라, 중간부터 찾아 나서는 방법입니다.\n만약 아래와 같은 배열에서 7을 찾아야 한다면,\n첫 번째로 중간 위치의 요소를 비교하고(7&#x3C;14)찾아야할 값보다 크면 왼쪽의 중간에서 다시 비교합니다.\n다시 한 번 크기를 비교해서 오른쪽의 중간으로 갈지, 왼쪽의 중간으로 갈지 결정하여 다시 찾아나서는 것을 이진 탐색법이라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">오름차순인 숫자 nums 배열과 찾아야할 target을 인자로 주면,\ntarget이 몇 번째 index인지 return 해주세요.\n\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\n설명: 찾지 못하면 -1로 return 해주세요.\n\n* nums 배열에 있는 요소는 서로 중복된 값이 없습니다.</code></pre></div>\n<h3 id=\"javascript\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">binary_search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     end <span class=\"token operator\">=</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     start <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"python\"><a href=\"#python\" aria-label=\"python permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mid_point <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> start <span class=\"token operator\">></span> end<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> target <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>mid_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> mid_point\n    <span class=\"token keyword\">elif</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n      start <span class=\"token operator\">=</span> mid_point<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n      <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n      end <span class=\"token operator\">=</span> mid_point<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n      <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"/posts/TIL - Day33: Code Kata-20(JS & PY) /","tagSlugs":["/tag/python/","/tag/javascript/","/tag/algorithm/","/tag/code-kata/"]},"frontmatter":{"date":"2019-08-31T22:40:32.169Z","description":"Wecode Code Kata day20","tags":["Python","Javascript","Algorithm","Code Kata"],"title":"TIL - Day33: Code Kata-20(JS & PY) "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL - Day33: Code Kata-20(JS & PY) /"}}}