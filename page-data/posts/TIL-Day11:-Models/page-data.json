{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Day11:-Models/","webpackCompilationHash":"3f1d21935fdcea05229f","result":{"data":{"markdownRemark":{"id":"697caac4-bc28-55e5-8844-c24f15c40725","html":"<p>이전 포스팅에서 MVT에 대한 간략한 개요를 살펴보았다면, 이번 포스팅에서는 MVT의 한 축인 Models에 대해 이야기 하고자 한다.<em><strong>(참고로 Templates 는 다루지 않을 예정.)</strong></em></p>\n<h3 id=\"models는-무엇인가\"><a href=\"#models%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"models는 무엇인가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Models는 무엇인가???</h3>\n<p>Models 는 Data를 server에서 요청하는 형태로 parsing 해주는 Django의 class이다. 일반적으로 각 모델은 하나의 DB 테이블을 매핑 해준다. 기본적인 특징은 다음과 같다.</p>\n<ul>\n<li>각 모델은 파이썬 내의 django.db.models.Model의 하위클래스이다.(그래서 model.py 파일을 열어보면 django.db에서 models라는 class를 import 하는것을 default로 지정되어 있는 것을 확인 할 수 있다.)</li>\n<li>모델의 각 속성들은 DB field 를 반영한다.\n(field 지정으로 틀을 잡아준다는 이야기.)</li>\n</ul>\n<p>e.g.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># Create your models here.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tweets</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tweet_id <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    content <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Django의 내장 메서드를 사용하면 위와 같이 server에서 요청하는 data들을 원하는 형식에 맞게 DB에서 뽑아 낼 수 있다.</br> <em><strong>(어찌 JS의 Class 포스팅 할때랑 똑같아 보이는건 느낌적인 느낌???)</strong></em></p>\n<p>그렇기에, 원하는 Data set을 뽑아낼 때, Django의 datafield 를 찾아서 조건에 알맞게 작성하면 된다.\n조건들은 <a href=\"https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.CharField\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식문서 참조</a>.</br>\n<em>(원하는 data field를 가늠할 수 없다면 <a href=\"https://www.webforefront.com/django/modeldatatypesandvalidation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a> 를 참조. <strong>더 빠르게 screening 할 수있다!!</strong>)</em></p>\n<p>자, 여기까지가 Models에 대한 소개였다면, 추가적으로 Coding Convention에 대해서도 살펴보자. </br><em><strong>(Bootcamp에 참여하게 되면서, 다른 분들에게 코드 공유하고 피드백 받는 경우가 점점 많아지면서, Coding Convention에 대한 중요성을 깨닫고 있어서 작성해본다.)</strong></em></p>\n<ol>\n<li>Model의 첫 글자는 Capital로 작성할 것.\n이 부분은 JS에서 class 언급 할 때랑 동일하다. 보통 변수를 camelCase로 작성하는것과는 다르게 해당 값이 class라는 것을 명시적으로 표현하기 위한 일종의 규약이라고 보면 된다.</br><em>(솔직히 이정도면, 문법이라고 해야하지 않나?????)</em></li>\n<li>Field name의 단어 spacing을 camelCase가 아닌 _(underscore)로 구분 한다.\n이 부분은 처음 알게되었다. class 에 종속된 부분들을 표현 해주기 위해서 Capital letter 와 동일한 맥락으로 이해된다.</li>\n<li>변수명은 한번에 이해하기 쉽게 작성할 것.\n이 부분은 언제나 강조되는 부분이다. 특히 파이썬에서는 더욱 더 중요하다고 볼 수 있다.(잊지 말자. <a href=\"https://www.python.org/dev/peps/pep-0020/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Explicit is better than implicit!</a>)</li>\n</ol>\n<p>이외에도 더 많은 Coding Convention이 존재하나, 현재 여기까지만 이해 할 수 있었기에(힘들다…) 추가적으로 알게 되는 부분이 있다면 다시 포스팅 하도록 하겠다.</p>\n<p>*Reference:\n<a href=\"https://wsvincent.com/django-models-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">William Vincent : Django Models Best Practices\n</a></br>\n<a href=\"https://www.webforefront.com/django/modeldatatypesandvalidation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Forefront:Django model data types</a></br>\n<a href=\"https://docs.djangoproject.com/en/2.2/topics/db/models/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django : Models</a></br></p>","fields":{"slug":"/posts/TIL-Day11:-Models/","tagSlugs":["/tag/django/","/tag/models/","/tag/python/","/tag/foundation/","/tag/design-pattern/"]},"frontmatter":{"date":"2019-08-09T22:40:32.169Z","description":"Django의 Models 에 대해 알아보자","tags":["Django","Models","Python","Foundation","Design Pattern"],"title":"TIL - Day11: Models"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL-Day11:-Models/"}}}